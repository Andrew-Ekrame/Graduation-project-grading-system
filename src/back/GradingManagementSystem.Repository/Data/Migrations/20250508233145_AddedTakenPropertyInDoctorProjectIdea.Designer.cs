// <auto-generated />
using System;
using GradingManagementSystem.Repository.Data.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GradingManagementSystem.Repository.Data.Migrations
{
    [DbContext(typeof(GradingManagementSystemDbContext))]
    [Migration("20250508233145_AddedTakenPropertyInDoctorProjectIdea")]
    partial class AddedTakenPropertyInDoctorProjectIdea
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CriteriaSchedule", b =>
                {
                    b.Property<int>("CriteriasId")
                        .HasColumnType("int");

                    b.Property<int>("SchedulesId")
                        .HasColumnType("int");

                    b.HasKey("CriteriasId", "SchedulesId");

                    b.HasIndex("SchedulesId");

                    b.ToTable("CriteriaSchedule");
                });

            modelBuilder.Entity("CriteriaTeam", b =>
                {
                    b.Property<int>("CriteriasId")
                        .HasColumnType("int");

                    b.Property<int>("TeamsId")
                        .HasColumnType("int");

                    b.HasKey("CriteriasId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("CriteriaTeam");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.AcademicAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FirstTermEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FirstTermStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SecondTermEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SecondTermStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AcademicAppointments");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.CommitteeDoctorSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("DoctorRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasCompletedEvaluation")
                        .HasColumnType("bit");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("CommitteeDoctorSchedules");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.Criteria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicAppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Evaluator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GivenTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxGrade")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicAppointmentId");

                    b.ToTable("Criterias");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.CriteriaSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CriteriaId")
                        .HasColumnType("int");

                    b.Property<int>("MaxGrade")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("CriteriaSchedules");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.DoctorProjectIdea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Taken")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DoctorProjectIdeas");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.Evaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdminEvaluatorId")
                        .HasColumnType("int");

                    b.Property<int?>("CriteriaId")
                        .HasColumnType("int");

                    b.Property<int?>("DoctorEvaluatorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EvaluationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EvaluatorRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Grade")
                        .HasColumnType("float");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminEvaluatorId");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("DoctorEvaluatorId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeamId");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.FinalProjectIdea", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("PostedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupervisorId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamProjectIdeaId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamRequestDoctorProjectIdeaId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId");

                    b.HasIndex("SupervisorId");

                    b.HasIndex("TeamId")
                        .IsUnique()
                        .HasFilter("[TeamId] IS NOT NULL");

                    b.HasIndex("TeamProjectIdeaId");

                    b.HasIndex("TeamRequestDoctorProjectIdeaId");

                    b.ToTable("FinalProjectIdeas");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.Invitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("LeaderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RespondedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeaderId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeamId");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcademicAppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicAppointmentId");

                    b.HasIndex("TeamId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InTeam")
                        .HasColumnType("bit");

                    b.Property<int?>("LeaderOfTeamId")
                        .HasColumnType("int");

                    b.Property<string>("Specialty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique()
                        .HasFilter("[AppUserId] IS NOT NULL");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("TeamId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.TaskItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupervisorId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupervisorId");

                    b.HasIndex("TeamId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.TaskMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TaskId");

                    b.HasIndex("TeamId");

                    b.ToTable("TaskMembers");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("HasProject")
                        .HasColumnType("bit");

                    b.Property<int?>("LeaderId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Specialty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupervisorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeaderId")
                        .IsUnique()
                        .HasFilter("[LeaderId] IS NOT NULL");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("SupervisorId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.TeamProjectIdea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LeaderId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeaderId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamProjectIdeas");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.TeamRequestDoctorProjectIdea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorProjectIdeaId")
                        .HasColumnType("int");

                    b.Property<int>("LeaderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("DoctorProjectIdeaId");

                    b.HasIndex("LeaderId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamsRequestDoctorProjectIdeas");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.TemporaryUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InTeam")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TemporaryUsers");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.UserOtp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OtpCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserOtps");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CriteriaSchedule", b =>
                {
                    b.HasOne("GradingManagementSystem.Core.Entities.Criteria", null)
                        .WithMany()
                        .HasForeignKey("CriteriasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GradingManagementSystem.Core.Entities.Schedule", null)
                        .WithMany()
                        .HasForeignKey("SchedulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CriteriaTeam", b =>
                {
                    b.HasOne("GradingManagementSystem.Core.Entities.Criteria", null)
                        .WithMany()
                        .HasForeignKey("CriteriasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GradingManagementSystem.Core.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.Admin", b =>
                {
                    b.HasOne("GradingManagementSystem.Core.Entities.Identity.AppUser", "AppUser")
                        .WithOne("Admin")
                        .HasForeignKey("GradingManagementSystem.Core.Entities.Admin", "AppUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.CommitteeDoctorSchedule", b =>
                {
                    b.HasOne("GradingManagementSystem.Core.Entities.Doctor", "Doctor")
                        .WithMany("DoctorSchedules")
                        .HasForeignKey("DoctorId");

                    b.HasOne("GradingManagementSystem.Core.Entities.Schedule", "Schedule")
                        .WithMany("CommitteeDoctorSchedules")
                        .HasForeignKey("ScheduleId");

                    b.Navigation("Doctor");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.Criteria", b =>
                {
                    b.HasOne("GradingManagementSystem.Core.Entities.AcademicAppointment", "AcademicAppointment")
                        .WithMany("Criterias")
                        .HasForeignKey("AcademicAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicAppointment");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.CriteriaSchedule", b =>
                {
                    b.HasOne("GradingManagementSystem.Core.Entities.Criteria", "Criteria")
                        .WithMany("CriteriaSchedules")
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GradingManagementSystem.Core.Entities.Schedule", "Schedule")
                        .WithMany("CriteriaSchedules")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Criteria");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.Doctor", b =>
                {
                    b.HasOne("GradingManagementSystem.Core.Entities.Identity.AppUser", "AppUser")
                        .WithOne("Doctor")
                        .HasForeignKey("GradingManagementSystem.Core.Entities.Doctor", "AppUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.DoctorProjectIdea", b =>
                {
                    b.HasOne("GradingManagementSystem.Core.Entities.Doctor", "Doctor")
                        .WithMany("DoctorProjectIdeas")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.Evaluation", b =>
                {
                    b.HasOne("GradingManagementSystem.Core.Entities.Admin", "AdminEvaluator")
                        .WithMany("Evaluations")
                        .HasForeignKey("AdminEvaluatorId");

                    b.HasOne("GradingManagementSystem.Core.Entities.Criteria", "Criteria")
                        .WithMany("Evaluations")
                        .HasForeignKey("CriteriaId");

                    b.HasOne("GradingManagementSystem.Core.Entities.Doctor", "DoctorEvaluator")
                        .WithMany("Evaluations")
                        .HasForeignKey("DoctorEvaluatorId");

                    b.HasOne("GradingManagementSystem.Core.Entities.Schedule", "Schedule")
                        .WithMany("Evaluations")
                        .HasForeignKey("ScheduleId");

                    b.HasOne("GradingManagementSystem.Core.Entities.Student", "Student")
                        .WithMany("Evaluations")
                        .HasForeignKey("StudentId");

                    b.HasOne("GradingManagementSystem.Core.Entities.Team", "Team")
                        .WithMany("Evaluations")
                        .HasForeignKey("TeamId");

                    b.Navigation("AdminEvaluator");

                    b.Navigation("Criteria");

                    b.Navigation("DoctorEvaluator");

                    b.Navigation("Schedule");

                    b.Navigation("Student");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.FinalProjectIdea", b =>
                {
                    b.HasOne("GradingManagementSystem.Core.Entities.Doctor", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId");

                    b.HasOne("GradingManagementSystem.Core.Entities.Team", "Team")
                        .WithOne("FinalProjectIdea")
                        .HasForeignKey("GradingManagementSystem.Core.Entities.FinalProjectIdea", "TeamId");

                    b.HasOne("GradingManagementSystem.Core.Entities.TeamProjectIdea", "TeamProjectIdea")
                        .WithMany()
                        .HasForeignKey("TeamProjectIdeaId");

                    b.HasOne("GradingManagementSystem.Core.Entities.TeamRequestDoctorProjectIdea", "TeamRequestDoctorProjectIdea")
                        .WithMany()
                        .HasForeignKey("TeamRequestDoctorProjectIdeaId");

                    b.Navigation("Supervisor");

                    b.Navigation("Team");

                    b.Navigation("TeamProjectIdea");

                    b.Navigation("TeamRequestDoctorProjectIdea");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.Invitation", b =>
                {
                    b.HasOne("GradingManagementSystem.Core.Entities.Student", "Leader")
                        .WithMany()
                        .HasForeignKey("LeaderId");

                    b.HasOne("GradingManagementSystem.Core.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.HasOne("GradingManagementSystem.Core.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.Navigation("Leader");

                    b.Navigation("Student");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.Notification", b =>
                {
                    b.HasOne("GradingManagementSystem.Core.Entities.Admin", "Admin")
                        .WithMany("Notifications")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.Schedule", b =>
                {
                    b.HasOne("GradingManagementSystem.Core.Entities.AcademicAppointment", "AcademicAppointment")
                        .WithMany()
                        .HasForeignKey("AcademicAppointmentId");

                    b.HasOne("GradingManagementSystem.Core.Entities.Team", "Team")
                        .WithMany("Schedules")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AcademicAppointment");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.Student", b =>
                {
                    b.HasOne("GradingManagementSystem.Core.Entities.Identity.AppUser", "AppUser")
                        .WithOne("Student")
                        .HasForeignKey("GradingManagementSystem.Core.Entities.Student", "AppUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GradingManagementSystem.Core.Entities.Team", "Team")
                        .WithMany("Students")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AppUser");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.TaskItem", b =>
                {
                    b.HasOne("GradingManagementSystem.Core.Entities.Doctor", "Supervisor")
                        .WithMany("Tasks")
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GradingManagementSystem.Core.Entities.Team", "Team")
                        .WithMany("Tasks")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supervisor");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.TaskMember", b =>
                {
                    b.HasOne("GradingManagementSystem.Core.Entities.Student", "Student")
                        .WithMany("TaskMembers")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GradingManagementSystem.Core.Entities.TaskItem", "Task")
                        .WithMany("TaskMembers")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GradingManagementSystem.Core.Entities.Team", "Team")
                        .WithMany("TaskMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Task");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.Team", b =>
                {
                    b.HasOne("GradingManagementSystem.Core.Entities.Student", "Leader")
                        .WithOne("LeaderOfTeam")
                        .HasForeignKey("GradingManagementSystem.Core.Entities.Team", "LeaderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GradingManagementSystem.Core.Entities.Doctor", "Supervisor")
                        .WithMany("Teams")
                        .HasForeignKey("SupervisorId");

                    b.Navigation("Leader");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.TeamProjectIdea", b =>
                {
                    b.HasOne("GradingManagementSystem.Core.Entities.Student", "Leader")
                        .WithMany("TeamProjectIdeas")
                        .HasForeignKey("LeaderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GradingManagementSystem.Core.Entities.Team", "Team")
                        .WithMany("TeamProjectIdeas")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Leader");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.TeamRequestDoctorProjectIdea", b =>
                {
                    b.HasOne("GradingManagementSystem.Core.Entities.Doctor", "Doctor")
                        .WithMany("TeamsRequestDoctorProjectIdeas")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GradingManagementSystem.Core.Entities.DoctorProjectIdea", "DoctorProjectIdea")
                        .WithMany("TeamsRequestDoctorProjectIdeas")
                        .HasForeignKey("DoctorProjectIdeaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GradingManagementSystem.Core.Entities.Student", "Leader")
                        .WithMany("TeamsRequestDoctorProjectIdeas")
                        .HasForeignKey("LeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GradingManagementSystem.Core.Entities.Team", "Team")
                        .WithMany("TeamsRequestDoctorProjectIdeas")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("DoctorProjectIdea");

                    b.Navigation("Leader");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GradingManagementSystem.Core.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GradingManagementSystem.Core.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GradingManagementSystem.Core.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GradingManagementSystem.Core.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.AcademicAppointment", b =>
                {
                    b.Navigation("Criterias");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.Admin", b =>
                {
                    b.Navigation("Evaluations");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.Criteria", b =>
                {
                    b.Navigation("CriteriaSchedules");

                    b.Navigation("Evaluations");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.Doctor", b =>
                {
                    b.Navigation("DoctorProjectIdeas");

                    b.Navigation("DoctorSchedules");

                    b.Navigation("Evaluations");

                    b.Navigation("Tasks");

                    b.Navigation("Teams");

                    b.Navigation("TeamsRequestDoctorProjectIdeas");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.DoctorProjectIdea", b =>
                {
                    b.Navigation("TeamsRequestDoctorProjectIdeas");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.Identity.AppUser", b =>
                {
                    b.Navigation("Admin")
                        .IsRequired();

                    b.Navigation("Doctor")
                        .IsRequired();

                    b.Navigation("Student")
                        .IsRequired();
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.Schedule", b =>
                {
                    b.Navigation("CommitteeDoctorSchedules");

                    b.Navigation("CriteriaSchedules");

                    b.Navigation("Evaluations");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.Student", b =>
                {
                    b.Navigation("Evaluations");

                    b.Navigation("LeaderOfTeam")
                        .IsRequired();

                    b.Navigation("TaskMembers");

                    b.Navigation("TeamProjectIdeas");

                    b.Navigation("TeamsRequestDoctorProjectIdeas");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.TaskItem", b =>
                {
                    b.Navigation("TaskMembers");
                });

            modelBuilder.Entity("GradingManagementSystem.Core.Entities.Team", b =>
                {
                    b.Navigation("Evaluations");

                    b.Navigation("FinalProjectIdea")
                        .IsRequired();

                    b.Navigation("Schedules");

                    b.Navigation("Students");

                    b.Navigation("TaskMembers");

                    b.Navigation("Tasks");

                    b.Navigation("TeamProjectIdeas");

                    b.Navigation("TeamsRequestDoctorProjectIdeas");
                });
#pragma warning restore 612, 618
        }
    }
}
